name: vprofile actions
on: workflow_dispatch
env:
    AWS_REGION: us-west-1
    ECR_REPOSITORY: vprofileapp
    EKS_CLUSTER: vprofile-eks
jobs:
    Testing:
        runs-on: ubuntu-latest
        steps:
            - name: Code checkout
              uses: actions/checkout@v4
            - name: Maven test
              run: mvn test
            - name: Checkstyle
              run: mvn checkstyle:checkstyle
            - name: Set Java 11
              uses: actions/setup-java@v3
              with:
                distribution: 'temurin'
                java-version: '11'
            - name: Setup SonarQuebe
              uses: warchant/setup-sonar-scanner@v7

            - name: SonarQube Scan
              run: |
               sonar-scanner \
                 -Dsonar.host.url=https://sonarcloud.io \
                 -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
                 -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }} \
                 -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} \
                 -Dsonar.sources=src/ \
                 -Dsonar.junit.reportsPath=target/surefire-reports/ \
                 -Dsonar.jacoco.reportsPath=target/jacoco.exec \
                 -Dsonar.java.checkstyle.reportsPaths=target/checkstyle-result.xml \
                 -Dsonar.java.binaries=target/test-classes/com/visualpathit/account

            # - name: SonarQube Quality Gate check
            #   id: sonarqube-quality-gate-check
            #   uses: sonarsource/sonarqube-quality-gate-action@master
            #   timeout-minutes: 5
            #   env:
            #     SONAR_TOKEN: ${{secrets.SONAR_TOKEN}}
            #     SONAR_HOST_URL: https://sonarcloud.io
    BUILD_AND_PUBLISH:
      needs: Testing
      runs-on: ubuntu-latest
      steps:
        - name: Code checkout
          uses: actions/checkout@v4
        - name: Set up AWS credentials
          env:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          run: echo "AWS credentials configured"

        - name: Log in to Amazon ECR
          env:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          run: |
            aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.REGISTRY }}

        - name: Build Docker Image
          run: |
            docker build -t ${{ secrets.REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:latest .

        - name: Tag Docker Image
          run: |
            docker tag ${{ secrets.REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:latest ${{ secrets.REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:${{ github.run_number }}

        - name: Push Docker Image to ECR
          run: |
            docker push ${{ secrets.REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:latest
            docker push ${{ secrets.REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:${{ github.run_number }}
    DeployToEKS:
      needs: BUILD_AND_PUBLISH
      runs-on: ubuntu-latest
      steps:
        - name: Code checkout
          uses: actions/checkout@v4
        - name: Configure AWS creds
          uses: aws-actions/configure-aws-credentials@v1
          with: 
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{ env.AWS_REGION }}
        - name: Get Kube config file
          run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER }}

        - name: Print config file
          run: cat ~/.kube/config

        - name: Login to ECR
          run: kubectl create secret docker-registry regcred --docker-server=${{ secrets.REGISTRY }} --docker-username=AWS  --docker-password=$(aws ecr get-login-password) 

        - name: Deploy Helm
          uses: bitovi/github-actions-deploy-eks-helm@v1.2.8
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{ env.AWS_REGION }}
            cluster-name: ${{ env.EKS_CLUSTER }}
            #config-files: .github/values/dev.yaml
            chart-path: helm/vprofilecharts
            namespace: default
            values: appimage=${{ secrets.REGISTRY }}/${{ env.ECR_REPOSITORY }},apptag=${{ github.run_number }}
            name: vprofile-stack  